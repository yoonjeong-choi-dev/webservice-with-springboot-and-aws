language: java
jdk:
  - openjdk8

# CI를 어떤 브랜치에 push할 때 수행하는지 브랜치 지정
branches:
  only:
    - master

# Travis CI 서버의 Home
# 같은 의존성은 다음 배포 때부터 다시 다운받지 않도록 캐싱
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# CI 수행 스크립트 실행 이전 : 실행 가능 파일로 변경
before_install:
  - chmod +x gradlew

# CI 수행 스크립트 : master 브랜치에 push되었을 때, 빌드 수행
script: "./gradlew clean build"

# deploy 명령어 수행 이전 : 빌드된 파일들을 zip 파일로 압축하여 deploy 대상 정의
before_deploy:
  - mkdir -p before-deploy # zip에 포함시킬 파일들을 담을 디렉토리 생성
  - cp scripts/*.sh before-deploy/  # 배포를 위한 스크립트 파일
  - cp appspec.yml before-deploy/   # CodeDeploy 설정 파일
  - cp build/libs/*.jar before-deploy/  # 애플리케이션 빌드 결과 jar 파일
  - cd before-deploy && zip -r before-deploy * # before-deploy로 이동후 전체 압축
  - cd ../ && mkdir -p deploy # 상위 디렉토리로 이동후 deploy 디렉토리 생성
  - mv before-deploy/before-deploy.zip deploy/webservice-with-springboot-and-aws.zip # deploy로 zip파일 이동

# S3 업로드 및 배포 등 외부 서비스와 연동될 행위 선언
deploy:
  # S3 관련 설정 : zip 파일 전송
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_PRIVATE_KEY # Travis repo settings에 설정된 값
    bucket: yjchoi-springboot-build # S3 버킷
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # zip 파일 접근을 private으로
    local_dir: deploy # deploy 할 디렉토리 (before_deploy에서 생성한 디렉토리)
    wait-until-deployed: true

  # CodeDeploy 관련 설정
  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_PRIVATE_KEY # Travis repo settings에 설정된 값
    bucket: yjchoi-springboot-build # S3 버킷
    key: webservice-with-springboot-and-aws.zip # 빌드 파일을 압축해서 전달
    bundle_type: zip
    application: yjchoi-springboot-webservice # 웹 콘솔에서 등록한 CodeDeploy 어플리케이션
    deployment_group: yjchoi-springboot-webservice-group # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true

# CI 실행 완료시 메일로 알람
notifications:
  email:
    recipients:
      - yjchoi7166@gmail.com